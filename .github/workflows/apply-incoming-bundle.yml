name: Apply incoming bundle and open PR

on:
  push:
    branches: ['**']          # any branch (incl. v2.0)
    paths: ['incoming/**']    # only when files under incoming/ change
  workflow_dispatch:
    inputs:
      file:
        description: 'incoming/<file>.zip or .patch to apply'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show context (debug)
        shell: bash
        run: |
          echo "Event:   $GITHUB_EVENT_NAME"
          echo "Branch:  ${GITHUB_REF##*/}"
          echo "SHA:     $GITHUB_SHA"
          echo "Input:   '${{ inputs.file }}'"
          echo "incoming/:"
          ls -l incoming || true

      - name: Determine payload file
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ inputs.file }}"
          if [[ -z "$CANDIDATE" ]]; then
            # Prefer a file from this commit if push triggered it
            if git diff-tree --no-commit-id --name-only -r "$GITHUB_SHA" | grep -q '^incoming/'; then
              CANDIDATE=$(git diff-tree --no-commit-id --name-only -r "$GITHUB_SHA" \
                | grep '^incoming/' | grep -Ei '\.(zip|patch)$' | head -n1 || true)
            fi
            # Otherwise, newest .zip/.patch under incoming/
            if [[ -z "${CANDIDATE:-}" ]]; then
              CANDIDATE=$(ls -t incoming/*.{zip,ZIP,patch,PATCH} 2>/dev/null | head -n1 || true)
            fi
          fi
          echo "Candidate: ${CANDIDATE:-<none>}"
          echo "file=${CANDIDATE:-}" >> "$GITHUB_OUTPUT"

      - name: Stop if no candidate found
        if: steps.pick.outputs.file == ''
        shell: bash
        run: |
          echo "No .zip or .patch found in incoming/. Provide inputs.file or push a file to incoming/."
          exit 0

      - name: Apply payload
        if: steps.pick.outputs.file != ''
        id: apply
        shell: bash
        run: |
          set -Eeuo pipefail
          set -x
          FILE="${{ steps.pick.outputs.file }}"
          [[ -f "$FILE" ]] || { echo "::error::File not found: $FILE"; exit 1; }

          mkdir -p _work/apply

          if [[ "$FILE" =~ \.zip$|\.ZIP$ ]]; then
            # Unzip (fallback to bsdtar if needed)
            unzip -o "$FILE" -d _work/apply || bsdtar -xf "$FILE" -C _work/apply

            echo "::group::Bundle contents (top 3 levels)"
            find _work/apply -maxdepth 3 -type f -print
            echo "::endgroup::"

            # Find the fixes root anywhere inside the zip
            FIXROOT=$(find _work/apply -type d -path "*/the-grey-fixes" | head -n1 || true)
            if [[ -n "${FIXROOT:-}" ]]; then
              echo "Fix root: $FIXROOT"
              if [[ -f "$FIXROOT/apply_the_grey_fixes.sh" ]]; then
                echo "Running helper script from its parent directory…"
                (
                  cd "$(dirname "$FIXROOT")"
                  bash the-grey-fixes/apply_the_grey_fixes.sh
                )
              else
                echo "No helper script; copying from fix root."
                rsync -a --exclude 'incoming/' "$FIXROOT"/ ./
              fi
            else
              echo "No the-grey-fixes/ dir; copying whole payload."
              rsync -a --exclude 'incoming/' _work/apply/ ./
            fi

          elif [[ "$FILE" =~ \.patch$|\.PATCH$ ]]; then
            echo "Applying patch…"
            git apply --index "$FILE"
          else
            echo "::error::Unsupported file type: $FILE"; exit 1
          fi

          # Do not commit the payload file itself
          git reset incoming || true
          git add -A || true

          if git diff --cached --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        if: steps.apply.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          base: ${{ github.ref_name }}                     # PR back into the branch you ran on (e.g. v2.0)
          branch: bot/apply-incoming-${{ github.run_id }}  # temp branch
          delete-branch: true
          title: "bot: apply incoming payload"
          body: |
            Automatically applied `${{ steps.pick.outputs.file }}` on `${{ github.ref_name }}`.
            Review the diff; backups may appear as *.bak.
          commit-message: "bot: apply ${{ steps.pick.outputs.file }}"
          committer: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"

      - name: No changes (info)
        if: steps.apply.outputs.changed != 'true'
        shell: bash
        run: echo "No changes detected; nothing to PR."
