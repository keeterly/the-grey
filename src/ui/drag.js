import { A } from '../engine/rules.js';
const LONGPRESS_MS=220;let pressTimer=null;let dragging=null;
export function wireHandDrag(root,dispatch){root.addEventListener('pointerdown',e=>{const cardEl=e.target.closest('[data-card-id][data-zone="hand"]');if(!cardEl)return;const cardId=cardEl.dataset.cardId;const startX=e.clientX,startY=e.clientY;pressTimer=setTimeout(()=>{if(dragging)return;cardEl.classList.add('is-preview');},LONGPRESS_MS);const onMove=ev=>{const dx=Math.abs(ev.clientX-startX),dy=Math.abs(ev.clientY-startY);if(!dragging&&(dx>5||dy>5)){clearTimeout(pressTimer);cardEl.classList.remove('is-preview');dragging={cardEl,cardId,dx,dy};cardEl.setPointerCapture(ev.pointerId);cardEl.classList.add('is-dragging');}if(dragging){cardEl.style.transform=`translate(${ev.clientX-startX}px,${ev.clientY-startY}px)`;}};const finish=ev=>{clearTimeout(pressTimer);if(dragging){cardEl.classList.remove('is-dragging');cardEl.style.transform='';const dropTarget=document.elementFromPoint(ev.clientX,ev.clientY);const toMain=dropTarget?.closest('[data-drop="slot"]');const toGlyph=dropTarget?.closest('[data-drop="glyph"]');if(toGlyph)dispatch({type:A.PLAY_TO_GLYPH,cardId});else if(toMain)dispatch({type:A.PLAY_TO_SLOT,cardId});}else{cardEl.classList.toggle('is-preview');}dragging=null;cardEl.releasePointerCapture?.(ev.pointerId);root.removeEventListener('pointermove',onMove);root.removeEventListener('pointerup',finish);root.removeEventListener('pointercancel',finish);};root.addEventListener('pointermove',onMove,{passive:true});root.addEventListener('pointerup',finish,{passive:true});root.addEventListener('pointercancel',finish,{passive:true});},{passive:true});}