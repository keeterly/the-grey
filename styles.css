:root{
  --card-w: clamp(102px, 12.375vw, 150px);
  --card-h: calc(var(--card-w) * 1.38);
  --card-radius: 16px;

  --paper:#191512; --paper-2:#1b1611; --ink:#e7dcc3; --muted:#bfb39a;
  --gold:#c6a56a; --rune:#796447; --aether:#7eb6ff; --stone:#3a3125;
  --gem-blue:#7eb6ff;
  --gem-size: 48px; /* 3x */
  --heart:#e27a7a;
}

*{box-sizing:border-box}
html,body{height:100%}
#board.theme-dark.parchment{
  margin:0; color:var(--ink); font-family:"Cormorant Garamond", serif;
  background:
    radial-gradient(60% 70% at 50% 30%, #2a231b 0%, var(--paper) 60%, #110e0b 100%),
    radial-gradient(circle at 10% 95%, rgba(255,190,95,.10), transparent 60%),
    radial-gradient(circle at 90% 95%, rgba(255,190,95,.10), transparent 60%);
  overflow:hidden;
}

/* Grid */
#board-grid.grid{
  display:grid !important;
  grid-template-rows:auto auto auto !important;
  row-gap:24px;
  height:100%;
  padding:12px 16px calc(26vh + 12px);
  align-content:space-evenly;
}
#board-grid .row{display:flex !important; flex-direction:column; align-items:center; gap:10px; min-height:0; position:relative}

/* Portraits + hearts */
.portrait{margin:0;text-align:center;font-size:1.05rem;color:var(--muted)}
.portrait img{width:96px;height:96px;object-fit:cover;border-radius:12px;border:1px solid #0006;box-shadow:0 6px 16px #000}
.hearts{display:flex;gap:6px;justify-content:center;margin-top:6px}
.hearts svg{width:18px;height:18px;filter:drop-shadow(0 0 4px #000);fill:var(--heart)}
.trance{margin-top:2px;opacity:.8;font-size:.9rem}

/* Player aether display */
.aether-display{display:flex;align-items:center;gap:8px;justify-content:center;margin-top:6px;color:var(--gem-blue);font-weight:700}
.aether-display .gem{width:var(--gem-size);height:var(--gem-size);filter:drop-shadow(0 0 6px rgba(126,182,255,.45));fill:var(--gem-blue)}
@keyframes gem-flash {
  0% { filter: drop-shadow(0 0 0 rgba(126,182,255,0)); transform:scale(1); }
  25%{ filter: drop-shadow(0 0 14px rgba(126,182,255,.95)); transform:scale(1.12); }
  55%{ filter: drop-shadow(0 0 10px rgba(126,182,255,.65)); transform:scale(1.04); }
  100%{ filter: drop-shadow(0 0 0 rgba(126,182,255,0)); transform:scale(1); }
}
.aether-display.flash{ animation: gem-flash 560ms ease-out; }

/* Corner placement */
.row.player .portrait{position:absolute;left:16px;bottom:16px}
.row.ai     .portrait{position:absolute;right:16px;top:16px}

/* Slot rows */
#ai-slots.slot-row, #player-slots.slot-row{
  display:grid !important;
  grid-auto-flow:column !important;
  grid-template-columns:repeat(4, var(--card-w)) !important;
  gap:16px !important;
  width:calc(var(--card-w)*4 + 16px*3) !important;
  max-width:96vw; place-items:center; margin-inline:auto;
}

/* Pulse */
@keyframes pulse { 0%{box-shadow:0 0 0 rgba(126,182,255,0)} 50%{box-shadow:0 0 18px rgba(126,182,255,.55)} 100%{box-shadow:0 0 0 rgba(126,182,255,0)} }

/* Slots */
.slot{
  width:var(--card-w); height:var(--card-h); border-radius:var(--card-radius);
  background:linear-gradient(180deg,#2b231b,#1a1511); border:1px solid #5a4b37;
  box-shadow:inset 0 0 18px rgba(0,0,0,.6), 0 8px 18px rgba(0,0,0,.35);
  display:grid;place-items:center;color:var(--muted);text-shadow:0 2px 10px #000; position:relative;
  user-select:none; -webkit-user-select:none; -webkit-touch-callout:none; overflow:hidden;
}
.slot::after{content:"";position:absolute;inset:10px;border-radius:calc(var(--card-radius) - 6px);border:1px solid #4a3d2f33}
.slot.drag-over{outline:2px dashed var(--aether); outline-offset:6px; filter:drop-shadow(0 0 10px rgba(126,182,255,.45))}
.slot.pulse-ok{animation:pulse 1.2s ease-in-out infinite}
.slot .card{position:absolute; left:0; top:0; width:100%; height:100%; transform:none; border-radius:var(--card-radius)}

/* Flow (with cost labels) */
.flow-wrap{display:flex; align-items:flex-start; gap:18px;}
.flow-title-rail{width:36px; display:flex; justify-content:center;}
.flow-title{writing-mode:vertical-rl; transform:rotate(180deg); letter-spacing:.28em; color:#b6a98e; margin-top:6px; user-select:none}
#flow-row.flow-row{
  list-style:none;margin:0 auto;padding:12px;
  width:calc(var(--card-w)*5 + 14px*4 + 24px) !important;
  display:grid !important; grid-template-columns:repeat(5, var(--card-w)) !important; gap:14px !important;
  background:linear-gradient(180deg,#241d15,#1a140f); border:1px solid #3b3126; border-radius:12px; box-shadow:0 0 32px #000 inset;
}
.flow-card{display:block;width:var(--card-w);height:var(--card-h); position:relative}
.flow-card .card{position:relative;left:0;top:0;transform:none}
.flow-cost-label{height:22px; display:flex; justify-content:center; align-items:center; margin-top:4px; pointer-events:none}
.flow-cost-label .aether-chip{position:static; transform:none; filter:none}
.flow-cost-label .aether-chip svg{width:18px;height:18px}
.flow-cost-label .aether-chip .val{font-size:12px}

/* Hand */
.hand-wrap{position:fixed;left:0;right:0;bottom:0;height:26vh;z-index:20}
.hand{
  position:absolute; left:50%; bottom:2vh; transform:translateX(-50%);
  width:min(1200px, 96vw); height:24vh; perspective:1200px;
  pointer-events:auto;
}

/* Card */
.card{
  position:absolute; top:0; left:50%; transform-origin:50% 95%;
  width:var(--card-w); height:var(--card-h); border-radius:var(--card-radius);
  background:linear-gradient(180deg,#30271f,#211b15);
  border:1px solid #5a4b37; color:var(--ink);
  box-shadow:0 14px 24px #000; transition:transform .18s ease, box-shadow .18s ease, z-index .1s, opacity .12s;
  pointer-events:auto; display:flex; flex-direction:column;
  user-select:none; -webkit-user-select:none; -webkit-touch-callout:none; touch-action:none;
}
.card *{user-select:none; -webkit-user-select:none; -webkit-touch-callout:none}
.card.dragging{opacity:.98; box-shadow:0 0 26px var(--aether), 0 16px 40px #000}
.card:hover{z-index:9999 !important; transform:translate(var(--tx,0), var(--ty,0)) rotate(var(--rot,0deg)) translateY(-20px) scale(1.07)}

/* Card content */
.card .title{padding:10px 10px 0 10px; font-weight:600}
.card .type{opacity:.78; padding:0 10px 4px 10px; font-size:.9rem}
.card .textbox{flex:1; padding:0 10px 10px 10px; opacity:.92; font-size:.95rem; line-height:1.2}
.card .cost{position:absolute; right:10px; bottom:10px; font-size:1.05rem; opacity:.9; text-shadow:0 1px 2px #000}

/* Aether chip (gem icon) */
.card .aether-chip{
  position:absolute; left:10px; bottom:10px; transform:translateY(1px);
  display:flex; align-items:center; gap:6px; z-index:3; filter:drop-shadow(0 1px 2px #000);
  user-select:none; pointer-events:none;
}
.aether-chip svg{width:var(--gem-size);height:var(--gem-size);display:block;fill:var(--gem-blue)}
.aether-chip .val{font-weight:800;font-size:calc(var(--gem-size) * 0.5);letter-spacing:.02em;color:var(--ink);text-shadow:0 1px 0 #000, 0 0 6px #000}

/* Animations: deal & discard */
@keyframes dealIn {
  0% { opacity:0; transform:translateY(60px) scale(.9) rotate(var(--rot,0deg)); }
  100% { opacity:1; transform:translate(var(--tx,0), var(--ty,0)) rotate(var(--rot,0deg)); }
}
.card.deal-in { animation: dealIn .28s ease forwards; animation-delay: var(--deal-delay, 0ms); }

@keyframes discardOut {
  0% { opacity:1; transform:translate(var(--tx,0), var(--ty,0)) rotate(var(--rot,0deg)); }
  100% { opacity:0; transform:translateY(80px) rotate(6deg) scale(.94); }
}
.card.discarding { animation: discardOut .32s ease forwards; }

/* Drop-to-void (flow right card falling away) */
.card.drop-void{
  position:fixed; z-index:4000; width:var(--card-w); height:var(--card-h);
  pointer-events:none; opacity:.98; transition:transform .6s ease, opacity .6s ease, filter .6s ease;
}
.card.drop-void.run{
  transform: translate(140px, 180px) rotate(18deg) scale(.8);
  opacity:0; filter:blur(2px);
}

/* Spotlight when buying from flow */
.card.spotlight{
  transition: transform .36s ease, opacity .42s ease;
  box-shadow:0 18px 40px rgba(0,0,0,.6), 0 0 28px rgba(126,182,255,.45);
  border-color:#8fbaff;
}

/* HUD & badges */
.hud{position:fixed; right:14px; bottom:14vh; display:flex; flex-direction:column; gap:14px; z-index:30}
.hud-btn{width:72px;height:72px;border-radius:12px;border:1px solid #4a3d2f;background:#2a211a;color:var(--ink);box-shadow:0 4px 10px #000;font-weight:700;display:grid;place-items:center;position:relative}
.hud-btn:hover{box-shadow:0 0 10px var(--gold)}
.drop-target{position:relative}
.drop-target.drop-ready{outline:2px dashed var(--aether); outline-offset:4px; box-shadow:0 0 20px rgba(126,182,255,.45)}
.drop-target.pulse-ok{animation:pulse 1.2s ease-in-out infinite}
.badge{
  position:absolute; right:6px; bottom:6px; min-width:20px; height:20px; padding:0 6px;
  border-radius:999px; background:#1f1712; color:var(--ink); border:1px solid #4a3d2f;
  font-size:12px; line-height:18px; text-align:center; box-shadow:0 2px 8px #000;
}

/* Preview / Zoom */
#preview-layer{position:fixed; inset:0; z-index:50; pointer-events:none}
#peek-card.card.peek{position:fixed; left:50%; top:18vh; transform:translate(-50%,0) scale(1.28); width:var(--card-w); height:var(--card-h); display:none; opacity:0; transition:opacity .12s ease; box-shadow:0 18px 36px rgba(0,0,0,.55), 0 0 24px rgba(126,182,255,.35)}
#peek-card.show{display:block; opacity:1}
#zoom-overlay{position:fixed; inset:0; display:none; background:rgba(0,0,0,.50); backdrop-filter:blur(1.5px); place-items:center; pointer-events:auto; z-index:60}
#zoom-overlay[data-open="true"]{display:grid}
#zoom-card.card.zoom{position:relative; transform:none; width:calc(var(--card-w)*2); height:calc(var(--card-h)*2); border-radius:22px}

/* Toast */
.toast{
  position:fixed; left:50%; bottom:18vh; transform:translateX(-50%);
  background:#2a211a; color:var(--ink); border:1px solid #4a3d2f; padding:10px 14px; border-radius:10px;
  box-shadow:0 8px 16px #000; opacity:0; transition:opacity .2s ease; z-index:70
}
.toast.show{opacity:1}

/* v2.571 â€” animations foundation: harmless defaults */
.fx-shadow { will-change: transform, opacity, filter; }
.fx-spotlight { will-change: transform, opacity, filter; }


/* === Portrait meters: 2Ã— size hearts & Ã¦ gem === */
.portrait .hearts svg { width: 36px; height: 36px; }
.aether-display .gem svg { width: 50px; height: 50px; }
.aether-display .val { font-size: 1.75rem; }

/* Click-to-place selection affordance */
.card.selected { outline: 2px solid var(--aether); outline-offset: 3px; }

/* Strengthen drop affordance */
.slot.drag-over, #btn-discard-hud.drop-ready {
  outline: 2px dashed var(--aether);
  outline-offset: 6px;
  filter: drop-shadow(0 0 12px rgba(126,182,255,.55));
}


/**
 * animations.js â€” v2.571+
 * Event-driven animations for The Grey
 *
 * Events:
 *  - 'cards:deal'         { nodes:[HTMLElement,...], stagger?:120 } // deck â†’ hand flight
 *  - 'cards:discard'      { nodes:[HTMLElement,...] }               // hand â†’ discard
 *  - 'aetherflow:reveal'  { node:HTMLElement }                      // entry pop (slot 0)
 *  - 'aetherflow:falloff' { node:HTMLElement }                      // fall-right (slot 4)
 *  - 'aetherflow:bought'  { node:HTMLElement }                      // spotlight + fly to discard
 */
(() => {
  if (window.__greyAnimationsLoaded__) return;
  window.__greyAnimationsLoaded__ = true;

  const Grey = (function ensureBus() {
    if (window.Grey && window.Grey.emit && window.Grey.on) return window.Grey;
    const listeners = new Map();
    const on = (n, fn) => { if (!listeners.has(n)) listeners.set(n, new Set()); listeners.get(n).add(fn); };
    const off = (n, fn) => listeners.get(n)?.delete(fn);
    const emit = (n, d) => (listeners.get(n) || []).forEach(fn => { try { fn(d); } catch(e){ console.error(e); } });
    return (window.Grey = { on, off, emit });
  })();

  // CSS
  (function css(){
    const id='grey-anim-css';
    if (document.getElementById(id)) return;
    const style=document.createElement('style'); style.id=id;
    style.textContent = `
@keyframes grey-draw-pop{0%{transform:translateY(12px) scale(.92);opacity:0}
 60%{transform:translateY(-2px) scale(1.02);opacity:1}
100%{transform:translateY(0) scale(1);opacity:1}}
@keyframes grey-reveal{0%{transform:scale(.92);opacity:0}
 60%{transform:scale(1.03);opacity:1}
100%{transform:scale(1);opacity:1}}
@keyframes grey-falloff-right{0%{transform:translateX(0) translateY(0) rotate(0);opacity:1}
 60%{transform:translateX(40px) translateY(8px) rotate(6deg);opacity:.7}
100%{transform:translateX(88px) translateY(20px) rotate(10deg);opacity:0}}
@keyframes grey-spotlight{0%{box-shadow:0 0 0 rgba(126,182,255,0)}
 30%{box-shadow:0 0 28px rgba(126,182,255,.45)}
 70%{box-shadow:0 0 22px rgba(126,182,255,.35)}
100%{box-shadow:0 0 0 rgba(126,182,255,0)}}
.grey-anim-draw{animation:grey-draw-pop 320ms cubic-bezier(.2,.7,.2,1) both}
.grey-anim-reveal{animation:grey-reveal 340ms ease-out both}
.grey-anim-fall{animation:grey-falloff-right 520ms ease-out both}
.grey-anim-spot{animation:grey-spotlight 620ms ease-out both}
.grey-fly-clone{position:fixed;z-index:9999;pointer-events:none;transform-origin:center;will-change:transform,opacity}
.grey-hide-during-flight{opacity:0 !important}

/* ensure market card can show spotlight glow cleanly */
.flow-card .card { position: relative; overflow: visible; }
    `.trim();
    document.head.appendChild(style);
  })();

  // helpers
  const asArray = v => Array.isArray(v) ? v : v ? [v] : [];
  const isEl = n => n && n.nodeType === 1;
  const sleep = ms => new Promise(r=>setTimeout(r,ms));

  function getDeckRect(){
    const d = document.getElementById('btn-deck-hud');
    return d ? d.getBoundingClientRect() : { left: 20, top: 20, width: 1, height: 1 };
    }
  function getDiscardRect(){
    const d = document.getElementById('btn-discard-hud');
    return d ? d.getBoundingClientRect() : { left: 40, top: 40, width: 1, height: 1 };
  }

  function cloneAtRect(rect, templateNode){
    const c = (templateNode?.cloneNode ? templateNode.cloneNode(true) : document.createElement('div'));
    c.classList.add('grey-fly-clone');
    c.style.left = `${rect.left}px`;  c.style.top = `${rect.top}px`;
    c.style.width = `${rect.width}px`; c.style.height = `${rect.height}px`;
    c.style.transform = `translate(0,0) rotate(0deg)`;
    c.style.opacity = '0.95';
    document.body.appendChild(c);
    return c;
  }

  async function fly(node, srcRect, dstRect, { duration=560, curve=true, spin=false }={}){
    if (!isEl(node) || !srcRect || !dstRect) return;
    const dx = dstRect.left - srcRect.left;
    const dy = dstRect.top  - srcRect.top;
    const bend = curve ? (Math.random()*40+28) * (Math.random()<.5?-1:1) : 0;
    const rot  = spin ? (Math.random()*16-8) : 0;
    const clone = cloneAtRect(srcRect, node);
    node.classList.add('grey-hide-during-flight');

    clone.animate([
      { transform:`translate(0,0) rotate(0deg)`, opacity:.95 },
      { transform:`translate(${dx*0.6}px, ${dy*0.6 + bend}px) rotate(${rot/2}deg)`, opacity:.92 },
      { transform:`translate(${dx}px, ${dy}px) rotate(${rot}deg)`, opacity:.88 }
    ], { duration, easing:'cubic-bezier(.2,.7,.2,1)', fill:'forwards' });

    await sleep(duration+30);
    clone.remove();
    node.classList.remove('grey-hide-during-flight');
  }

  // Events
  Grey.on('cards:deal', async ({nodes, stagger=110}={}) => {
    const deck = getDeckRect();
    const arr = asArray(nodes).filter(isEl);
    for (let i=0;i<arr.length;i++){
      const target = arr[i];
      const tRect  = target.getBoundingClientRect();
      await fly(target, deck, tRect, { duration: 540, curve:true, spin:false });
      target.classList.add('grey-anim-draw');
      target.addEventListener('animationend', ()=> target.classList.remove('grey-anim-draw'), { once:true });
      if (i < arr.length-1) await sleep(stagger);
    }
  });

  Grey.on('cards:discard', async ({nodes}={}) => {
    const dst = getDiscardRect();
    await Promise.all(
      asArray(nodes).filter(isEl).map(n => {
        const s = n.getBoundingClientRect();
        return fly(n, s, dst, { duration: 560, curve:true, spin:true });
      })
    );
  });

  Grey.on('aetherflow:reveal', ({node}={}) => {
    if (!isEl(node)) return;
    node.classList.add('grey-anim-reveal');
    node.addEventListener('animationend', ()=> node.classList.remove('grey-anim-reveal'), { once:true });
  });

  Grey.on('aetherflow:falloff', ({node}={}) => {
    if (!isEl(node)) return;
    node.classList.add('grey-anim-fall');
    node.addEventListener('animationend', ()=> node.classList.remove('grey-anim-fall'), { once:true });
  });

  Grey.on('aetherflow:bought', async ({node}={}) => {
    if (!isEl(node)) return;
    const dst = getDiscardRect();
    node.classList.add('grey-anim-spot');
    const src = node.getBoundingClientRect();
    await fly(node, src, dst, { duration: 560, curve:true, spin:false });
    node.classList.remove('grey-anim-spot');
  });
})();



@media (prefers-reduced-motion: reduce) {
  .fx-shadow, .fx-spotlight { transition: none !important; animation: none !important; }
}
